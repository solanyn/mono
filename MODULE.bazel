module(
    name = "goyangi",
    version = "0.1.0",
)

bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "aspect_bazel_lib", version = "2.20.0")
bazel_dep(name = "rules_nixpkgs_core", version = "0.13.0")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "buildifier_prebuilt", version = "8.2.0.2")
bazel_dep(name = "rules_multirun", version = "0.12.0")
bazel_dep(name = "rules_rust", version = "0.62.0")
bazel_dep(name = "rules_uv", version = "0.83.0")
bazel_dep(name = "rules_shell", version = "0.5.0")
bazel_dep(name = "rules_python", version = "1.5.1")
bazel_dep(name = "aspect_rules_py", version = "1.6.1")
bazel_dep(name = "aspect_rules_js", version = "2.4.1")
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "container_structure_test", version = "1.19.1")

# Note: dbx_build_tools handled in WORKSPACE for compatibility

# Hermetic LLVM toolchain
bazel_dep(name = "toolchains_llvm", version = "1.4.0")

# Register LLVM toolchain
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    name = "llvm_toolchain",
    llvm_version = "17.0.6",
)
use_repo(llvm, "llvm_toolchain", "llvm_toolchain_llvm")

# Note: dbx_build_tools toolchain registered in WORKSPACE

# python
PYTHON_VERSION = "3.12"
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(python_version = PYTHON_VERSION)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

pip.parse(
    hub_name = "cronprint_deps",
    python_version = PYTHON_VERSION,
    requirements_lock = "//cronprint:requirements-linux.lock",
)
use_repo(pip, "cronprint_deps")

pip.parse(
    hub_name = "jaxes_deps",
    python_version = PYTHON_VERSION,
    requirements_lock = "//jaxes:requirements-linux.lock",
)
use_repo(pip, "jaxes_deps")

pip.parse(
    hub_name = "torches_deps",
    python_version = PYTHON_VERSION,
    requirements_lock = "//torches:requirements-linux.lock",
)
use_repo(pip, "torches_deps")

# rust
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    extra_target_triples = [
        "x86_64-unknown-linux-gnu",
        "aarch64-unknown-linux-gnu",
    ],
)

crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate")
crate.from_cargo(
    name = "crates",
    cargo_lockfile = "//:Cargo.lock",
    manifests = [
        "//:Cargo.toml",
        "//gt7/telemetry:Cargo.toml",
        "//tldr/backend:Cargo.toml",
    ],
)
use_repo(crate, "crates")

# js
npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    npmrc = "//:.npmrc",
    pnpm_lock = "//:pnpm-lock.yaml",
    public_hoist_packages = {
        "typescript-eslint": [""],
    },
)
use_repo(npm, "npm")

# bazel run -- @pnpm//:pnpm --dir $PWD install --lockfile-only
pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")
use_repo(pnpm, "pnpm")

# containers
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_cc",
    digest = "sha256:eccec5274132c1be0ce5d2c8e6fe41033e64af5e987ccee9007826e4c012069d",
    image = "gcr.io/distroless/cc-debian12",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
)
oci.pull(
    name = "distroless_base",
    digest = "sha256:201ef9125ff3f55fda8e0697eff0b3ce9078366503ef066653635a3ac3ed9c26",
    image = "gcr.io/distroless/base-debian12",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
    tag = "latest",
)
use_repo(oci, "distroless_base", "distroless_base_linux_amd64", "distroless_base_linux_arm64_v8", "distroless_cc", "distroless_cc_linux_amd64", "distroless_cc_linux_arm64_v8")

# Note: dbx_build_tools dependencies handled in WORKSPACE for compatibility
